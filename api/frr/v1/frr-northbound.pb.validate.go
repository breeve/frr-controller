// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/frr-northbound.proto

package frr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCapabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCapabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCapabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCapabilitiesRequestMultiError, or nil if none found.
func (m *GetCapabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCapabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCapabilitiesRequestMultiError(errors)
	}

	return nil
}

// GetCapabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCapabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCapabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCapabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCapabilitiesRequestMultiError) AllErrors() []error { return m }

// GetCapabilitiesRequestValidationError is the validation error returned by
// GetCapabilitiesRequest.Validate if the designated constraints aren't met.
type GetCapabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCapabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCapabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCapabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCapabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCapabilitiesRequestValidationError) ErrorName() string {
	return "GetCapabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCapabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCapabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCapabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCapabilitiesRequestValidationError{}

// Validate checks the field values on GetCapabilitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCapabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCapabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCapabilitiesResponseMultiError, or nil if none found.
func (m *GetCapabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCapabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrrVersion

	// no validation rules for RollbackSupport

	for idx, item := range m.GetSupportedModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCapabilitiesResponseValidationError{
						field:  fmt.Sprintf("SupportedModules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCapabilitiesResponseValidationError{
						field:  fmt.Sprintf("SupportedModules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCapabilitiesResponseValidationError{
					field:  fmt.Sprintf("SupportedModules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCapabilitiesResponseMultiError(errors)
	}

	return nil
}

// GetCapabilitiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCapabilitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCapabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCapabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCapabilitiesResponseMultiError) AllErrors() []error { return m }

// GetCapabilitiesResponseValidationError is the validation error returned by
// GetCapabilitiesResponse.Validate if the designated constraints aren't met.
type GetCapabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCapabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCapabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCapabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCapabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCapabilitiesResponseValidationError) ErrorName() string {
	return "GetCapabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCapabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCapabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCapabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCapabilitiesResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Encoding

	// no validation rules for WithDefaults

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on CreateCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCandidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCandidateRequestMultiError, or nil if none found.
func (m *CreateCandidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCandidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCandidateRequestMultiError(errors)
	}

	return nil
}

// CreateCandidateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCandidateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCandidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCandidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCandidateRequestMultiError) AllErrors() []error { return m }

// CreateCandidateRequestValidationError is the validation error returned by
// CreateCandidateRequest.Validate if the designated constraints aren't met.
type CreateCandidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCandidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCandidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCandidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCandidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCandidateRequestValidationError) ErrorName() string {
	return "CreateCandidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCandidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCandidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCandidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCandidateRequestValidationError{}

// Validate checks the field values on CreateCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCandidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCandidateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCandidateResponseMultiError, or nil if none found.
func (m *CreateCandidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCandidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CandidateId

	if len(errors) > 0 {
		return CreateCandidateResponseMultiError(errors)
	}

	return nil
}

// CreateCandidateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCandidateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCandidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCandidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCandidateResponseMultiError) AllErrors() []error { return m }

// CreateCandidateResponseValidationError is the validation error returned by
// CreateCandidateResponse.Validate if the designated constraints aren't met.
type CreateCandidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCandidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCandidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCandidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCandidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCandidateResponseValidationError) ErrorName() string {
	return "CreateCandidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCandidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCandidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCandidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCandidateResponseValidationError{}

// Validate checks the field values on DeleteCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCandidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCandidateRequestMultiError, or nil if none found.
func (m *DeleteCandidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCandidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CandidateId

	if len(errors) > 0 {
		return DeleteCandidateRequestMultiError(errors)
	}

	return nil
}

// DeleteCandidateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCandidateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCandidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCandidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCandidateRequestMultiError) AllErrors() []error { return m }

// DeleteCandidateRequestValidationError is the validation error returned by
// DeleteCandidateRequest.Validate if the designated constraints aren't met.
type DeleteCandidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCandidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCandidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCandidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCandidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCandidateRequestValidationError) ErrorName() string {
	return "DeleteCandidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCandidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCandidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCandidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCandidateRequestValidationError{}

// Validate checks the field values on DeleteCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCandidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCandidateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCandidateResponseMultiError, or nil if none found.
func (m *DeleteCandidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCandidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCandidateResponseMultiError(errors)
	}

	return nil
}

// DeleteCandidateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCandidateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCandidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCandidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCandidateResponseMultiError) AllErrors() []error { return m }

// DeleteCandidateResponseValidationError is the validation error returned by
// DeleteCandidateResponse.Validate if the designated constraints aren't met.
type DeleteCandidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCandidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCandidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCandidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCandidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCandidateResponseValidationError) ErrorName() string {
	return "DeleteCandidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCandidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCandidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCandidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCandidateResponseValidationError{}

// Validate checks the field values on UpdateCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCandidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCandidateRequestMultiError, or nil if none found.
func (m *UpdateCandidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCandidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CandidateId

	if len(errors) > 0 {
		return UpdateCandidateRequestMultiError(errors)
	}

	return nil
}

// UpdateCandidateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCandidateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCandidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCandidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCandidateRequestMultiError) AllErrors() []error { return m }

// UpdateCandidateRequestValidationError is the validation error returned by
// UpdateCandidateRequest.Validate if the designated constraints aren't met.
type UpdateCandidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCandidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCandidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCandidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCandidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCandidateRequestValidationError) ErrorName() string {
	return "UpdateCandidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCandidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCandidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCandidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCandidateRequestValidationError{}

// Validate checks the field values on UpdateCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCandidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCandidateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCandidateResponseMultiError, or nil if none found.
func (m *UpdateCandidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCandidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCandidateResponseMultiError(errors)
	}

	return nil
}

// UpdateCandidateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCandidateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCandidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCandidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCandidateResponseMultiError) AllErrors() []error { return m }

// UpdateCandidateResponseValidationError is the validation error returned by
// UpdateCandidateResponse.Validate if the designated constraints aren't met.
type UpdateCandidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCandidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCandidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCandidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCandidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCandidateResponseValidationError) ErrorName() string {
	return "UpdateCandidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCandidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCandidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCandidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCandidateResponseValidationError{}

// Validate checks the field values on EditCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCandidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCandidateRequestMultiError, or nil if none found.
func (m *EditCandidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCandidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CandidateId

	for idx, item := range m.GetUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditCandidateRequestValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditCandidateRequestValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditCandidateRequestValidationError{
					field:  fmt.Sprintf("Update[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDelete() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditCandidateRequestValidationError{
						field:  fmt.Sprintf("Delete[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditCandidateRequestValidationError{
						field:  fmt.Sprintf("Delete[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditCandidateRequestValidationError{
					field:  fmt.Sprintf("Delete[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EditCandidateRequestMultiError(errors)
	}

	return nil
}

// EditCandidateRequestMultiError is an error wrapping multiple validation
// errors returned by EditCandidateRequest.ValidateAll() if the designated
// constraints aren't met.
type EditCandidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCandidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCandidateRequestMultiError) AllErrors() []error { return m }

// EditCandidateRequestValidationError is the validation error returned by
// EditCandidateRequest.Validate if the designated constraints aren't met.
type EditCandidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCandidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCandidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCandidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCandidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCandidateRequestValidationError) ErrorName() string {
	return "EditCandidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditCandidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCandidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCandidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCandidateRequestValidationError{}

// Validate checks the field values on EditCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCandidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCandidateResponseMultiError, or nil if none found.
func (m *EditCandidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCandidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditCandidateResponseMultiError(errors)
	}

	return nil
}

// EditCandidateResponseMultiError is an error wrapping multiple validation
// errors returned by EditCandidateResponse.ValidateAll() if the designated
// constraints aren't met.
type EditCandidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCandidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCandidateResponseMultiError) AllErrors() []error { return m }

// EditCandidateResponseValidationError is the validation error returned by
// EditCandidateResponse.Validate if the designated constraints aren't met.
type EditCandidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCandidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCandidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCandidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCandidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCandidateResponseValidationError) ErrorName() string {
	return "EditCandidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditCandidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCandidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCandidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCandidateResponseValidationError{}

// Validate checks the field values on LoadToCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadToCandidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadToCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadToCandidateRequestMultiError, or nil if none found.
func (m *LoadToCandidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadToCandidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CandidateId

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadToCandidateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadToCandidateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadToCandidateRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadToCandidateRequestMultiError(errors)
	}

	return nil
}

// LoadToCandidateRequestMultiError is an error wrapping multiple validation
// errors returned by LoadToCandidateRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadToCandidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadToCandidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadToCandidateRequestMultiError) AllErrors() []error { return m }

// LoadToCandidateRequestValidationError is the validation error returned by
// LoadToCandidateRequest.Validate if the designated constraints aren't met.
type LoadToCandidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadToCandidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadToCandidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadToCandidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadToCandidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadToCandidateRequestValidationError) ErrorName() string {
	return "LoadToCandidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadToCandidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadToCandidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadToCandidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadToCandidateRequestValidationError{}

// Validate checks the field values on LoadToCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadToCandidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadToCandidateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadToCandidateResponseMultiError, or nil if none found.
func (m *LoadToCandidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadToCandidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoadToCandidateResponseMultiError(errors)
	}

	return nil
}

// LoadToCandidateResponseMultiError is an error wrapping multiple validation
// errors returned by LoadToCandidateResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadToCandidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadToCandidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadToCandidateResponseMultiError) AllErrors() []error { return m }

// LoadToCandidateResponseValidationError is the validation error returned by
// LoadToCandidateResponse.Validate if the designated constraints aren't met.
type LoadToCandidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadToCandidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadToCandidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadToCandidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadToCandidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadToCandidateResponseValidationError) ErrorName() string {
	return "LoadToCandidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadToCandidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadToCandidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadToCandidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadToCandidateResponseValidationError{}

// Validate checks the field values on CommitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommitRequestMultiError, or
// nil if none found.
func (m *CommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CandidateId

	// no validation rules for Phase

	// no validation rules for Comment

	if len(errors) > 0 {
		return CommitRequestMultiError(errors)
	}

	return nil
}

// CommitRequestMultiError is an error wrapping multiple validation errors
// returned by CommitRequest.ValidateAll() if the designated constraints
// aren't met.
type CommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitRequestMultiError) AllErrors() []error { return m }

// CommitRequestValidationError is the validation error returned by
// CommitRequest.Validate if the designated constraints aren't met.
type CommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitRequestValidationError) ErrorName() string { return "CommitRequestValidationError" }

// Error satisfies the builtin error interface
func (e CommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitRequestValidationError{}

// Validate checks the field values on CommitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommitResponseMultiError,
// or nil if none found.
func (m *CommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return CommitResponseMultiError(errors)
	}

	return nil
}

// CommitResponseMultiError is an error wrapping multiple validation errors
// returned by CommitResponse.ValidateAll() if the designated constraints
// aren't met.
type CommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitResponseMultiError) AllErrors() []error { return m }

// CommitResponseValidationError is the validation error returned by
// CommitResponse.Validate if the designated constraints aren't met.
type CommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitResponseValidationError) ErrorName() string { return "CommitResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitResponseValidationError{}

// Validate checks the field values on ListTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionsRequestMultiError, or nil if none found.
func (m *ListTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListTransactionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsRequestMultiError) AllErrors() []error { return m }

// ListTransactionsRequestValidationError is the validation error returned by
// ListTransactionsRequest.Validate if the designated constraints aren't met.
type ListTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsRequestValidationError) ErrorName() string {
	return "ListTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsRequestValidationError{}

// Validate checks the field values on ListTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionsResponseMultiError, or nil if none found.
func (m *ListTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Client

	// no validation rules for Date

	// no validation rules for Comment

	if len(errors) > 0 {
		return ListTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListTransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsResponseMultiError) AllErrors() []error { return m }

// ListTransactionsResponseValidationError is the validation error returned by
// ListTransactionsResponse.Validate if the designated constraints aren't met.
type ListTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsResponseValidationError) ErrorName() string {
	return "ListTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsResponseValidationError{}

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionRequestMultiError, or nil if none found.
func (m *GetTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Encoding

	// no validation rules for WithDefaults

	if len(errors) > 0 {
		return GetTransactionRequestMultiError(errors)
	}

	return nil
}

// GetTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionRequestMultiError) AllErrors() []error { return m }

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

// Validate checks the field values on GetTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionResponseMultiError, or nil if none found.
func (m *GetTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionResponseMultiError(errors)
	}

	return nil
}

// GetTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionResponseMultiError) AllErrors() []error { return m }

// GetTransactionResponseValidationError is the validation error returned by
// GetTransactionResponse.Validate if the designated constraints aren't met.
type GetTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionResponseValidationError) ErrorName() string {
	return "GetTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionResponseValidationError{}

// Validate checks the field values on LockConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LockConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockConfigRequestMultiError, or nil if none found.
func (m *LockConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LockConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockConfigRequestMultiError(errors)
	}

	return nil
}

// LockConfigRequestMultiError is an error wrapping multiple validation errors
// returned by LockConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type LockConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockConfigRequestMultiError) AllErrors() []error { return m }

// LockConfigRequestValidationError is the validation error returned by
// LockConfigRequest.Validate if the designated constraints aren't met.
type LockConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockConfigRequestValidationError) ErrorName() string {
	return "LockConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LockConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockConfigRequestValidationError{}

// Validate checks the field values on LockConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockConfigResponseMultiError, or nil if none found.
func (m *LockConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LockConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockConfigResponseMultiError(errors)
	}

	return nil
}

// LockConfigResponseMultiError is an error wrapping multiple validation errors
// returned by LockConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type LockConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockConfigResponseMultiError) AllErrors() []error { return m }

// LockConfigResponseValidationError is the validation error returned by
// LockConfigResponse.Validate if the designated constraints aren't met.
type LockConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockConfigResponseValidationError) ErrorName() string {
	return "LockConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LockConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockConfigResponseValidationError{}

// Validate checks the field values on UnlockConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlockConfigRequestMultiError, or nil if none found.
func (m *UnlockConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnlockConfigRequestMultiError(errors)
	}

	return nil
}

// UnlockConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UnlockConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UnlockConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockConfigRequestMultiError) AllErrors() []error { return m }

// UnlockConfigRequestValidationError is the validation error returned by
// UnlockConfigRequest.Validate if the designated constraints aren't met.
type UnlockConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockConfigRequestValidationError) ErrorName() string {
	return "UnlockConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockConfigRequestValidationError{}

// Validate checks the field values on UnlockConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlockConfigResponseMultiError, or nil if none found.
func (m *UnlockConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnlockConfigResponseMultiError(errors)
	}

	return nil
}

// UnlockConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UnlockConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UnlockConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockConfigResponseMultiError) AllErrors() []error { return m }

// UnlockConfigResponseValidationError is the validation error returned by
// UnlockConfigResponse.Validate if the designated constraints aren't met.
type UnlockConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockConfigResponseValidationError) ErrorName() string {
	return "UnlockConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockConfigResponseValidationError{}

// Validate checks the field values on ExecuteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecuteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecuteRequestMultiError,
// or nil if none found.
func (m *ExecuteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	for idx, item := range m.GetInput() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteRequestValidationError{
						field:  fmt.Sprintf("Input[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteRequestValidationError{
						field:  fmt.Sprintf("Input[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteRequestValidationError{
					field:  fmt.Sprintf("Input[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExecuteRequestMultiError(errors)
	}

	return nil
}

// ExecuteRequestMultiError is an error wrapping multiple validation errors
// returned by ExecuteRequest.ValidateAll() if the designated constraints
// aren't met.
type ExecuteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteRequestMultiError) AllErrors() []error { return m }

// ExecuteRequestValidationError is the validation error returned by
// ExecuteRequest.Validate if the designated constraints aren't met.
type ExecuteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteRequestValidationError) ErrorName() string { return "ExecuteRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExecuteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteRequestValidationError{}

// Validate checks the field values on ExecuteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExecuteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteResponseMultiError, or nil if none found.
func (m *ExecuteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutput() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteResponseValidationError{
						field:  fmt.Sprintf("Output[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteResponseValidationError{
						field:  fmt.Sprintf("Output[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteResponseValidationError{
					field:  fmt.Sprintf("Output[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExecuteResponseMultiError(errors)
	}

	return nil
}

// ExecuteResponseMultiError is an error wrapping multiple validation errors
// returned by ExecuteResponse.ValidateAll() if the designated constraints
// aren't met.
type ExecuteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteResponseMultiError) AllErrors() []error { return m }

// ExecuteResponseValidationError is the validation error returned by
// ExecuteResponse.Validate if the designated constraints aren't met.
type ExecuteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteResponseValidationError) ErrorName() string { return "ExecuteResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExecuteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteResponseValidationError{}

// Validate checks the field values on ModuleData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModuleData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModuleData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModuleDataMultiError, or
// nil if none found.
func (m *ModuleData) ValidateAll() error {
	return m.validate(true)
}

func (m *ModuleData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Organization

	// no validation rules for Revision

	if len(errors) > 0 {
		return ModuleDataMultiError(errors)
	}

	return nil
}

// ModuleDataMultiError is an error wrapping multiple validation errors
// returned by ModuleData.ValidateAll() if the designated constraints aren't met.
type ModuleDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleDataMultiError) AllErrors() []error { return m }

// ModuleDataValidationError is the validation error returned by
// ModuleData.Validate if the designated constraints aren't met.
type ModuleDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleDataValidationError) ErrorName() string { return "ModuleDataValidationError" }

// Error satisfies the builtin error interface
func (e ModuleDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleDataValidationError{}

// Validate checks the field values on PathValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PathValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PathValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PathValueMultiError, or nil
// if none found.
func (m *PathValue) ValidateAll() error {
	return m.validate(true)
}

func (m *PathValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Value

	if len(errors) > 0 {
		return PathValueMultiError(errors)
	}

	return nil
}

// PathValueMultiError is an error wrapping multiple validation errors returned
// by PathValue.ValidateAll() if the designated constraints aren't met.
type PathValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathValueMultiError) AllErrors() []error { return m }

// PathValueValidationError is the validation error returned by
// PathValue.Validate if the designated constraints aren't met.
type PathValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathValueValidationError) ErrorName() string { return "PathValueValidationError" }

// Error satisfies the builtin error interface
func (e PathValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPathValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathValueValidationError{}

// Validate checks the field values on DataTree with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataTree with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataTreeMultiError, or nil
// if none found.
func (m *DataTree) ValidateAll() error {
	return m.validate(true)
}

func (m *DataTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Encoding

	// no validation rules for Data

	if len(errors) > 0 {
		return DataTreeMultiError(errors)
	}

	return nil
}

// DataTreeMultiError is an error wrapping multiple validation errors returned
// by DataTree.ValidateAll() if the designated constraints aren't met.
type DataTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataTreeMultiError) AllErrors() []error { return m }

// DataTreeValidationError is the validation error returned by
// DataTree.Validate if the designated constraints aren't met.
type DataTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataTreeValidationError) ErrorName() string { return "DataTreeValidationError" }

// Error satisfies the builtin error interface
func (e DataTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataTreeValidationError{}
